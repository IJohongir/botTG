import logging
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardRemove, CallbackQuery

from data.config import admins
from handlers.users.Drivers import get_drivers, get_gas, get_petrol, get_problems, get_FUEL, get_orders
from handlers.users.Users import get_users
from keyboards.default import adminMarkup, newMarkup, SettingMarkup
from keyboards.inline import oil_car1
from loader import dp, db, bot
from states import Id_driver, New_admin
from states.States import IDAdmin, new_Car


async def on_startup_notify(dp: Dispatcher):
    for admin in admins:
        try:
            await dp.bot.send_message(admin, "—è –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç–∞—Ç—å")

        except Exception as err:
            logging.exception(err)


@dp.message_handler(Command('admin'))
async def admins_not(message: types.Message):
    admin = admins
    user_id = message.from_user.id
    admin_table = db.select_all_admins_id()
    admins_bot = [user[0] for user in admin_table]

    if user_id in admin or user_id in admins_bot:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Å—Ç–≤—É—é –≤–∞—Å –æ–æ –≤—Å–µ –º–æ–≥—É—á–∏–π üí™üí™üí™", reply_markup=adminMarkup
        )

    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞üò¨!!!")


@dp.message_handler(text='–ù–æ–≤–æ–µ(üõ£,user,driver,new Admin)')
async def new_user_line_driver(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å", reply_markup=newMarkup)


@dp.message_handler(text='‚óÄÔ∏è–ù–∞–∑–∞–¥')
async def back_to(message: types.Message):
    await message.answer("‚óÄÔ∏è", reply_markup=adminMarkup)


@dp.message_handler(text='üôçüèª‚Äç‚ôÄÔ∏è/üôéüèΩ‚Äç‚ôÇÔ∏è–ü–∞—Å—Å–∞–∂–∏—Ä—ã')
async def users_get(message: types.Message):
    users = get_users()
    if len(users) == 0:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ , –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")

    for user in users:
        await message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ  </b>\n<b>id :  </b>{user.id}\n"
            f"<b>–§–∞–º–∏–ª–∏—è : </b>{user.first_name} \n"
            f"<b>–ò–º—è : </b>{user.last_name} \n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä: </b>{user.phone_number} \n "
            f"<b>–ò–º—è –ª–∏–Ω–∏–∏:  </b>{user.name_line}"

        )


@dp.message_handler(text='üèé–í–æ–¥–∏—Ç–µ–ª–∏')
async def drivers_get(message: types.Message):
    users = get_drivers()
    if len(users) == 0:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ , –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è")

    for user in users:
        await message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ  </b>\n<b>id :  </b>{user.user_id}\n<b>–§.–ò.–û : </b>{user.FIO} "
            f"\n<b>–ü–∞—Å–ø–æ—Ä—Ç —Å–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä : </b>{user.ser_num_passport} \n<b>–¢–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä:    </b>{user.phone_number}  "
        )


@dp.message_handler(text="üôçüèª‚Äç‚ôÄÔ∏è/üôéüèΩ‚Äç‚ôÇÔ∏èUser")
async def admin_adduser(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", reply_markup=ReplyKeyboardRemove()
    )
    await IDAdmin.I1.set()


@dp.message_handler(state=IDAdmin.I1)
async def id_user(message: types.Message, state: FSMContext):
    answer = int(message.text)
    isregis = "not registered"
    db.create_table_users()
    db.admin_add_users(answer, isregis)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=newMarkup)
    await state.reset_state()


@dp.message_handler(text="üôç‚Äç‚ôÇÔ∏èDriver")
async def admin_add_driver(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", reply_markup=ReplyKeyboardRemove()
    )
    await Id_driver.Ad1.set()


@dp.message_handler(state=Id_driver.Ad1)
async def id_user(message: types.Message, state: FSMContext):
    answer = int(message.text)
    isregis = "not registered"
    db.create_table_drivers()
    db.admin_add_drivers(answer, isregis)
    await state.update_data(user_id=answer)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=newMarkup)
    await state.reset_state()


@dp.message_handler(text="new Admin")
async def admin_add_admin(message: types.Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", reply_markup=ReplyKeyboardRemove()
    )
    await New_admin.N1.set()


@dp.message_handler(state=New_admin.N1)
async def id_admin_(message: types.Message, state: FSMContext):
    answer = int(message.text)
    db.create_table_admins()
    db.admin_add_Admin(answer)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=newMarkup)
    await state.reset_state()


@dp.message_handler(text="üöò–ú–∞—à–∏–Ω—ãüöò")
async def get_admin(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ë–µ–Ω–∑–∏–Ω –∏–ª–∏ –ì–∞–∑ –º–∞—à–∏–Ω—ã ? ", reply_markup=oil_car1)


@dp.callback_query_handler(text_contains="Gas")
async def get_gas_cars(call: CallbackQuery):
    await call.answer(cache_time=20)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    cars = get_gas()
    if len(cars) == 0:
        await call.message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –º–∞—à–∏–Ω ")

    # –ø—Ä–∞–≤–∞ —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä–∞,–º–∞—Ä–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è,–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª,—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç,—Ä–∞—Å—Ö–æ–¥,user_id

    for car in cars:
        await call.message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ  </b>\n<b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è : </b>{car.ser_num_prava}\n"
            f"<b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è : </b>  {car.mark_avto}\n "
            f"<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è : </b>  {car.number_avto}\n "
            f"<b>–¢–µ—Ö.–ü–∞—Å—Å–ø–æ—Ä—Ç : </b>    {car.ser_num_texpas}\n"
            f"<b>–†–∞—Å—Ö–æ–¥ –Ω–∞ 100 –∫–º : </b>  {car.km_consumption}\n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>  {car.user_id} \n"
        )


@dp.callback_query_handler(text_contains="PetroL")
async def get_petrol_cars(call: CallbackQuery):
    await call.answer(cache_time=20)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    cars = get_petrol()
    if len(cars) == 0:
        await call.message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –º–∞—à–∏–Ω ")

    # –ø—Ä–∞–≤–∞ —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä–∞,–º–∞—Ä–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è,–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª,—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç,—Ä–∞—Å—Ö–æ–¥,user_id

    for car in cars:
        await call.message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ  </b>\n<b>–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è : </b>{car.ser_num_prava}\n"
            f"<b>–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è : </b> {car.mark_avto}\n "
            f"<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è : </b> {car.number_avto}\n "
            f"<b>–¢–µ—Ö.–ü–∞—Å—Å–ø–æ—Ä—Ç : </b> {car.ser_num_texpas}\n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>{car.user_id} \n"
            f"<b>–†–∞—Å—Ö–æ–¥ –Ω–∞ 100 –∫–º : </b> {car.km_consumption}"

        )


@dp.message_handler(text="üèéCar")
async def new_car(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ", reply_markup=ReplyKeyboardRemove())
    await new_Car.NC1.set()


@dp.message_handler(state=new_Car.NC1)
async def id_car_(message: types.Message, state: FSMContext):
    answer = int(message.text)
    db.create_table_cars()
    regis = "not registered"
    db.admin_add_cars(answer, regis)
    await message.answer("–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=newMarkup)
    await state.reset_state()


@dp.message_handler(text='–û—Ç—á–µ—Ç—ã & –¢–µ—Ö.–ü—Ä–æ–±–ª–µ–º—ã')
async def report_driver(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å", reply_markup=SettingMarkup)


@dp.message_handler(text='üßæ–û—Ç—á–µ—Ç(–í–°–ï)')
async def order_day(message: types.Message):
    orders = get_orders()
    if len(orders) == 0:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –º–∞—à–∏–Ω ")

    # –ø—Ä–∞–≤–∞ —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä–∞,–º–∞—Ä–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è,–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª,—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç,—Ä–∞—Å—Ö–æ–¥,user_id

    for order in orders:
        await message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ üîΩüîΩüîΩ </b>\n"
            f"<b>ID –û—Ç—á–µ—Ç–∞: </b>{order.user_id} \n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>{order.user_id} \n"
            f"<b>–î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞ : </b> {order.date_day}"
            f"<b>–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–µ—Ö–∞–ª–∏ –∫–º : </b> {order.count_day}"
            f"<b>–ö—É–¥–∞ —Ö–æ–¥–∏–ª–∏ ? : </b>{order.view_road} \n"
            f"<b>–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –ª/m¬≥ : </b>{order.oil_day} \n"
        )



@dp.message_handler(text='‚öôÔ∏è–¢–µ—Ö.–ü—Ä–æ–±–ª–µ–º—ã(admin)')
async def select_prob(message: types.Message):
    problems = get_problems()
    if len(problems) == 0:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –º–∞—à–∏–Ω ")

    # –ø—Ä–∞–≤–∞ —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä–∞,–º–∞—Ä–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è,–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª,—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç,—Ä–∞—Å—Ö–æ–¥,user_id

    for problem in problems:
        await message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ üîΩüîΩüîΩ </b>\n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>{problem.user_id} \n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã : </b> {problem.tex_problem} \n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã : </b> {problem.description} \n"

        )


@dp.message_handler(text='‚õΩÔ∏è–¢–æ–ø–ª–∏–≤–∞')
async def select_fuel(message: types.Message):
    problems = get_FUEL()
    if len(problems) == 0:
        await message.answer("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç —Ç–∞–∫–∏—Ö –º–∞—à–∏–Ω ")

    # –ø—Ä–∞–≤–∞ —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä–∞,–º–∞—Ä–∫–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å—è,–Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª,—Ç–µ—Ö –ø–∞—Å–ø–æ—Ä—Ç,—Ä–∞—Å—Ö–æ–¥,user_id

    for problem in problems:
        await message.answer(
            f"<b>–≤—Å–µ –¥–∞–Ω–Ω—ã–µ üîΩüîΩüîΩ </b>\n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: </b>{problem.user_id} \n"
            f"<b>–¢–æ–ø–ª–∏–≤–∞ : </b> {problem.fuel} \n"
            f"<b>–í–∏–¥ —Ç–æ–ø–ª–∏–≤–∞: </b> {problem.fuel_name} \n"

        )
